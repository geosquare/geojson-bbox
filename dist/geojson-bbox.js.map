{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "geojson-bbox.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "module.exports = function(gj) {\n  var coords, bbox;\n  if (!gj.hasOwnProperty('type')) return;\n  coords = getCoordinatesDump(gj);\n  bbox = [ Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,\n      Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY,];\n  return coords.reduce(function(prev,coord) {\n    return [\n      Math.min(coord[0], prev[0]),\n      Math.min(coord[1], prev[1]),\n      Math.max(coord[0], prev[2]),\n      Math.max(coord[1], prev[3])\n    ];\n  }, bbox);\n};\n\nfunction getCoordinatesDump(gj) {\n  var coords;\n  if (gj.type == 'Point') {\n    coords = [gj.coordinates];\n  } else if (gj.type == 'LineString' || gj.type == 'MultiPoint') {\n    coords = gj.coordinates;\n  } else if (gj.type == 'Polygon' || gj.type == 'MultiLineString') {\n    coords = gj.coordinates.reduce(function(dump,part) {\n      return dump.concat(part);\n    }, []);\n  } else if (gj.type == 'MultiPolygon') {\n    coords = gj.coordinates.reduce(function(dump,poly) {\n      return dump.concat(poly.reduce(function(points,part) {\n        return points.concat(part);\n      },[]));\n    },[]);\n  } else if (gj.type == 'Feature') {\n    coords =  getCoordinatesDump(gj.geometry);\n  } else if (gj.type == 'GeometryCollection') {\n    coords = gj.geometries.reduce(function(dump,g) {\n      return dump.concat(getCoordinatesDump(g));\n    },[]);\n  } else if (gj.type == 'FeatureCollection') {\n    coords = gj.features.reduce(function(dump,f) {\n      return dump.concat(getCoordinatesDump(f));\n    },[]);\n  }\n  return coords;\n}\n"
  ]
}